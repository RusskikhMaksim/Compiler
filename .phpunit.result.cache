C:37:"PHPUnit\Runner\DefaultTestResultCache":4181:{a:2:{s:7:"defects";a:30:{s:7:"Warning";i:6;s:15:"sdadaTest::test";i:4;s:11:"sdada::test";i:4;s:26:"sdadaTest::testSumOfTwoNum";i:4;s:31:"CalculatorTest::testSumOfTwoNum";i:4;s:21:"LexerTest::testLetter";i:3;s:38:"LexerTest::testLetter with data set #0";i:3;s:46:"LexerTest::testLetter with data set "letter_y"";i:4;s:47:"LexerTest::testLetter with data set "digit_two"";i:3;s:52:"LexerTest::testLetter with data set "another_symbol"";i:3;s:65:"LexerTest::testLetter with data set "MUST_TO_BE_FAILED_digit_two"";i:3;s:70:"LexerTest::testLetter with data set "MUST_TO_BE_FAILED_another_symbol"";i:3;s:63:"LexerTest::testDigit with data set "MUST_TO_BE_FAILED_letter_t"";i:4;s:69:"LexerTest::testDigit with data set "MUST_TO_BE_FAILED_another_symbol"";i:4;s:65:"LexerTest::testDigit with data set "MUST_TO_BE_PASSED_digit_five"";i:4;s:52:"TokenFormationTest::testLetterToken with data set #0";i:3;s:55:"TokenFormationTest::testAllOtherTokens with data set #0";i:4;s:51:"TokenFormationTest::testDigitToken with data set #0";i:4;s:68:"TokenFormationTest::testAllOtherTokensStringLiteral with data set #0";i:4;s:73:"visitorOfParsingTest::testVisitPreprocessorDirectiveNode with data set #0";i:3;s:45:"ParserTest::testPreprocessorDirectiveNodeFunc";i:1;s:62:"ParserTest::testPreprocessorDirectiveNodeFunc with data set #0";i:4;s:51:"ParseIntMainTest::testPreprocessorDirectiveNodeFunc";i:4;s:50:"printfParseTest::testPreprocessorDirectiveNodeFunc";i:4;s:53:"printfParseTest::testFunctionCallOrVariableAssignment";i:4;s:42:"ParseReturnFuncTest::testKeyWordReturnFunc";i:4;s:51:"ParseIncludeTest::testPreprocessorDirectiveNodeFunc";i:3;s:41:"ParseIntMainTest::testDeclareFuncOrIdFunc";i:4;s:43:"ParseExpressionTest::testexpressionNodeFunc";i:3;s:47:"Parse_If_ExpressionTest::testExpressionNodeFunc";i:4;}s:5:"times";a:39:{s:7:"Warning";d:0.001;s:15:"sdadaTest::test";d:0.124;s:11:"sdada::test";d:0.005;s:26:"sdadaTest::testSumOfTwoNum";d:0.005;s:31:"CalculatorTest::testSumOfTwoNum";d:0.005;s:48:"CalculatorTest::testSumOfTwoNum with data set #0";d:0.004;s:48:"CalculatorTest::testSumOfTwoNum with data set #1";d:0;s:48:"CalculatorTest::testSumOfTwoNum with data set #2";d:0;s:21:"LexerTest::testLetter";d:0.069;s:38:"LexerTest::testLetter with data set #0";d:0.001;s:38:"LexerTest::testLetter with data set #1";d:0;s:38:"LexerTest::testLetter with data set #2";d:0;s:46:"LexerTest::testLetter with data set "letter_y"";d:0;s:47:"LexerTest::testLetter with data set "digit_two"";d:0.001;s:52:"LexerTest::testLetter with data set "another_symbol"";d:0;s:64:"LexerTest::testLetter with data set "MUST_TO_BE_PASSED_letter_y"";d:0.396;s:65:"LexerTest::testLetter with data set "MUST_TO_BE_FAILED_digit_two"";d:0;s:70:"LexerTest::testLetter with data set "MUST_TO_BE_FAILED_another_symbol"";d:0;s:65:"LexerTest::testDigit with data set "MUST_TO_BE_PASSED_digit_five"";d:0;s:63:"LexerTest::testDigit with data set "MUST_TO_BE_FAILED_letter_t"";d:0;s:69:"LexerTest::testDigit with data set "MUST_TO_BE_FAILED_another_symbol"";d:0;s:52:"TokenFormationTest::testLetterToken with data set #0";d:0;s:45:"LexerTest::testLetter with data set "testArr"";d:0;s:51:"TokenFormationTest::testDigitToken with data set #0";d:0;s:55:"TokenFormationTest::testAllOtherTokens with data set #0";d:0;s:68:"TokenFormationTest::testAllOtherTokensStringLiteral with data set #0";d:0;s:73:"visitorOfParsingTest::testVisitPreprocessorDirectiveNode with data set #0";d:0.002;s:45:"ParserTest::testPreprocessorDirectiveNodeFunc";d:0.001;s:62:"ParserTest::testPreprocessorDirectiveNodeFunc with data set #0";d:0.001;s:51:"ParseIncludeTest::testPreprocessorDirectiveNodeFunc";d:0.052;s:51:"ParseIntMainTest::testPreprocessorDirectiveNodeFunc";d:0;s:50:"printfParseTest::testPreprocessorDirectiveNodeFunc";d:0.001;s:53:"printfParseTest::testFunctionCallOrVariableAssignment";d:0;s:41:"ParseIntMainTest::testDeclareFuncOrIdFunc";d:0;s:42:"ParseReturnFuncTest::testKeyWordReturnFunc";d:0;s:43:"ParseExpressionTest::testexpressionNodeFunc";d:0.001;s:45:"ParseIfExpressionTest::testexpressionNodeFunc";d:0;s:47:"Parse_If_ExpressionTest::testexpressionNodeFunc";d:0;s:47:"Parse_If_ExpressionTest::testExpressionNodeFunc";d:0.006;}}}